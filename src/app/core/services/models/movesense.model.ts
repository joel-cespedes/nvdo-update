/**
 * Modelos para los diferentes tipos de datos de sensores Movesense
 */

export interface AccelerometerData {
    timestamp: number;
    x: number;
    y: number;
    z: number;
    magnitude: number;
    samples?: { x: number; y: number; z: number }[];
}

export interface TemperatureData {
    timestamp: number;
    measurement: number; // In Celsius
}

export interface HeartRateData {
    timestamp: number;
    hr: number; // Average HR (BPM)
    rrIntervals?: number[]; // RR intervals in ms
}

export interface EcgData {
    timestamp: number;
    samples: number[];
}

export interface GyroscopeData {
    timestamp: number;
    samples: { x: number; y: number; z: number }[];
}

export interface MagnetometerData {
    timestamp: number;
    samples: { x: number; y: number; z: number }[];
}

export interface ImuData {
    timestamp: number;
    samples: {
        acc: { x: number; y: number; z: number };
        gyro: { x: number; y: number; z: number };
        magn: { x: number; y: number; z: number };
    }[];
}

export type SensorStatus = 'inactive' | 'active' | 'error';

export enum PostureState {
    UNKNOWN = 'unknown',
    STANDING = 'standing',
    STOOPED = 'stooped',
    LYING = 'lying'
}

// Define UUIDs for Movesense BLE service and characteristics
export const MOVESENSE_BLE = {
    SERVICE_UUID: '34802252-7185-4d5d-b431-630e7050e8f0',
    CHAR_COMMAND_UUID: '34800001-7185-4d5d-b431-630e7050e8f0', // Write
    CHAR_NOTIFY_UUID: '34800002-7185-4d5d-b431-630e7050e8f0',  // Notify
};

/**
 * Comandos Movesense mejorados con formatos alternativos
 * Incluye comandos originales y variaciones basadas en la documentación
 */
export const MOVESENSE_COMMANDS = {
    // Original commands - keep these
    TEMPERATURE: new Uint8Array([0x01, 0x62, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x54, 0x65, 0x6d, 0x70]),
    ACCELEROMETER: new Uint8Array([0x0c, 0x62, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x41, 0x63, 0x63, 0x2f, 0x31, 0x30, 0x34]),
    HEART_RATE: new Uint8Array([0x0c, 0x63, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x48, 0x52]),
    ECG: new Uint8Array([0x01, 0x63, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x45, 0x43, 0x47, 0x2f, 0x31, 0x32, 0x35]),
    GYROSCOPE: new Uint8Array([0x0c, 0x64, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x47, 0x79, 0x72, 0x6f, 0x2f, 0x31, 0x30, 0x34]),
    MAGNETOMETER: new Uint8Array([0x0c, 0x65, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x4d, 0x61, 0x67, 0x6e, 0x2f, 0x31, 0x30, 0x34]),

    // Alternative formats based on documentation
    // Formato alternativo 1 - comando más simple
    TEMP_ALT1: new Uint8Array([0x01, 0x62, 0x01]),
    ACC_ALT1: new Uint8Array([0x0c, 0x62, 0x01]),
    HR_ALT1: new Uint8Array([0x0c, 0x63, 0x01]),
    GYRO_ALT1: new Uint8Array([0x0c, 0x64, 0x01]),
    MAGN_ALT1: new Uint8Array([0x0c, 0x65, 0x01]),
    ECG_ALT1: new Uint8Array([0x01, 0x63, 0x01]),

    // Formato alternativo 2 - basado en ID numérico de recurso
    TEMP_ALT2: new Uint8Array([0x01, 0x01, 0x00, 0x06]), // Temperature resource ID 6
    ACC_ALT2: new Uint8Array([0x0c, 0x01, 0x00, 0x07]),  // Accelerometer resource ID 7
    HR_ALT2: new Uint8Array([0x0c, 0x01, 0x00, 0x08]),   // Heart rate resource ID 8
    GYRO_ALT2: new Uint8Array([0x0c, 0x01, 0x00, 0x09]), // Gyroscope resource ID 9
    MAGN_ALT2: new Uint8Array([0x0c, 0x01, 0x00, 0x0A]), // Magnetometer resource ID 10
    ECG_ALT2: new Uint8Array([0x01, 0x01, 0x00, 0x0B]),  // ECG resource ID 11

    // Formato alternativo 3 - preámbulos diferentes
    TEMP_ALT3: new Uint8Array([0x02, 0x62, 0x01]),
    ACC_ALT3: new Uint8Array([0x02, 0x62, 0x02]),
    HR_ALT3: new Uint8Array([0x02, 0x63, 0x01]),
    GYRO_ALT3: new Uint8Array([0x02, 0x64, 0x01]),
    MAGN_ALT3: new Uint8Array([0x02, 0x65, 0x01]),
    ECG_ALT3: new Uint8Array([0x02, 0x63, 0x02]),

    // Comandos con frecuencia de muestreo específica
    ACC_13HZ: new Uint8Array([0x0c, 0x62, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x41, 0x63, 0x63, 0x2f, 0x31, 0x33]),
    ACC_26HZ: new Uint8Array([0x0c, 0x62, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x41, 0x63, 0x63, 0x2f, 0x32, 0x36]),
    ACC_52HZ: new Uint8Array([0x0c, 0x62, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x41, 0x63, 0x63, 0x2f, 0x35, 0x32]),
    GYRO_13HZ: new Uint8Array([0x0c, 0x64, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x47, 0x79, 0x72, 0x6f, 0x2f, 0x31, 0x33]),
    GYRO_26HZ: new Uint8Array([0x0c, 0x64, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x47, 0x79, 0x72, 0x6f, 0x2f, 0x32, 0x36]),
    GYRO_52HZ: new Uint8Array([0x0c, 0x64, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x47, 0x79, 0x72, 0x6f, 0x2f, 0x35, 0x32]),
    MAGN_13HZ: new Uint8Array([0x0c, 0x65, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x4d, 0x61, 0x67, 0x6e, 0x2f, 0x31, 0x33]),
    MAGN_26HZ: new Uint8Array([0x0c, 0x65, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x4d, 0x61, 0x67, 0x6e, 0x2f, 0x32, 0x36]),

    // ECG con distintas frecuencias de muestreo
    ECG_125HZ: new Uint8Array([0x01, 0x63, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x45, 0x43, 0x47, 0x2f, 0x31, 0x32, 0x35]),
    ECG_250HZ: new Uint8Array([0x01, 0x63, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x45, 0x43, 0x47, 0x2f, 0x32, 0x35, 0x30]),
    ECG_500HZ: new Uint8Array([0x01, 0x63, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x45, 0x43, 0x47, 0x2f, 0x35, 0x30, 0x30]),

    // Comandos de desactivación de sensores
    STOP_TEMP: new Uint8Array([0x00, 0x62, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x54, 0x65, 0x6d, 0x70]),
    STOP_ACC: new Uint8Array([0x00, 0x62, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x41, 0x63, 0x63]),
    STOP_HR: new Uint8Array([0x00, 0x63, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x48, 0x52]),
    STOP_GYRO: new Uint8Array([0x00, 0x64, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x47, 0x79, 0x72, 0x6f]),
    STOP_MAGN: new Uint8Array([0x00, 0x65, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x4d, 0x61, 0x67, 0x6e]),
    STOP_ECG: new Uint8Array([0x00, 0x63, 0x2f, 0x4d, 0x65, 0x61, 0x73, 0x2f, 0x45, 0x43, 0x47]),

    // Información del dispositivo
    INFO: new Uint8Array([0x01, 0x11, 0x2f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x49, 0x6e, 0x66, 0x6f]),
    BATTERY: new Uint8Array([0x01, 0x11, 0x2f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x2f, 0x4c, 0x65, 0x76, 0x65, 0x6c]),
};

/**
 * Métodos HTTP para comandos Movesense
 */
export const MOVESENSE_METHOD = {
    GET: 0x01,
    PUT: 0x02,
    POST: 0x03,
    DELETE: 0x04,
    SUBSCRIBE: 0x0c,
    UNSUBSCRIBE: 0x00
};

/**
 * Crea comandos personalizados basados en la documentación de Movesense
 * El formato de las solicitudes REST para Movesense es:
 * /resourcePath?{parameters}
 */
export function createMovesenseCommand(method: number, path: string): Uint8Array {
    // Convert the path to a byte array
    const pathBytes = new TextEncoder().encode(path);

    // Create the command with the method byte followed by the path
    const command = new Uint8Array(pathBytes.length + 1);
    command[0] = method;
    command.set(pathBytes, 1);

    return command;
}